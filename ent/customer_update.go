// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"customer-service/ent/customer"
	"customer-service/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUsername sets the "username" field.
func (cu *CustomerUpdate) SetUsername(s string) *CustomerUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetPassword sets the "password" field.
func (cu *CustomerUpdate) SetPassword(s string) *CustomerUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetFullname sets the "fullname" field.
func (cu *CustomerUpdate) SetFullname(s string) *CustomerUpdate {
	cu.mutation.SetFullname(s)
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *CustomerUpdate) SetPhoneNumber(i int) *CustomerUpdate {
	cu.mutation.ResetPhoneNumber()
	cu.mutation.SetPhoneNumber(i)
	return cu
}

// AddPhoneNumber adds i to the "phone_number" field.
func (cu *CustomerUpdate) AddPhoneNumber(i int) *CustomerUpdate {
	cu.mutation.AddPhoneNumber(i)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetIDCard sets the "id_card" field.
func (cu *CustomerUpdate) SetIDCard(i int) *CustomerUpdate {
	cu.mutation.ResetIDCard()
	cu.mutation.SetIDCard(i)
	return cu
}

// AddIDCard adds i to the "id_card" field.
func (cu *CustomerUpdate) AddIDCard(i int) *CustomerUpdate {
	cu.mutation.AddIDCard(i)
	return cu
}

// SetMemberCard sets the "member_card" field.
func (cu *CustomerUpdate) SetMemberCard(i int) *CustomerUpdate {
	cu.mutation.ResetMemberCard()
	cu.mutation.SetMemberCard(i)
	return cu
}

// AddMemberCard adds i to the "member_card" field.
func (cu *CustomerUpdate) AddMemberCard(i int) *CustomerUpdate {
	cu.mutation.AddMemberCard(i)
	return cu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cu *CustomerUpdate) SetDateOfBirth(t time.Time) *CustomerUpdate {
	cu.mutation.SetDateOfBirth(t)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Username(); ok {
		if err := customer.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Customer.username": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Fullname(); ok {
		if err := customer.FullnameValidator(v); err != nil {
			return &ValidationError{Name: "fullname", err: fmt.Errorf(`ent: validator failed for field "Customer.fullname": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.IDCard(); ok {
		if err := customer.IDCardValidator(v); err != nil {
			return &ValidationError{Name: "id_card", err: fmt.Errorf(`ent: validator failed for field "Customer.id_card": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MemberCard(); ok {
		if err := customer.MemberCardValidator(v); err != nil {
			return &ValidationError{Name: "member_card", err: fmt.Errorf(`ent: validator failed for field "Customer.member_card": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(customer.FieldUsername, field.TypeString, value)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.Fullname(); ok {
		_spec.SetField(customer.FieldFullname, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPhoneNumber(); ok {
		_spec.AddField(customer.FieldPhoneNumber, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.IDCard(); ok {
		_spec.SetField(customer.FieldIDCard, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedIDCard(); ok {
		_spec.AddField(customer.FieldIDCard, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MemberCard(); ok {
		_spec.SetField(customer.FieldMemberCard, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMemberCard(); ok {
		_spec.AddField(customer.FieldMemberCard, field.TypeInt, value)
	}
	if value, ok := cu.mutation.DateOfBirth(); ok {
		_spec.SetField(customer.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUsername sets the "username" field.
func (cuo *CustomerUpdateOne) SetUsername(s string) *CustomerUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CustomerUpdateOne) SetPassword(s string) *CustomerUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetFullname sets the "fullname" field.
func (cuo *CustomerUpdateOne) SetFullname(s string) *CustomerUpdateOne {
	cuo.mutation.SetFullname(s)
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *CustomerUpdateOne) SetPhoneNumber(i int) *CustomerUpdateOne {
	cuo.mutation.ResetPhoneNumber()
	cuo.mutation.SetPhoneNumber(i)
	return cuo
}

// AddPhoneNumber adds i to the "phone_number" field.
func (cuo *CustomerUpdateOne) AddPhoneNumber(i int) *CustomerUpdateOne {
	cuo.mutation.AddPhoneNumber(i)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetIDCard sets the "id_card" field.
func (cuo *CustomerUpdateOne) SetIDCard(i int) *CustomerUpdateOne {
	cuo.mutation.ResetIDCard()
	cuo.mutation.SetIDCard(i)
	return cuo
}

// AddIDCard adds i to the "id_card" field.
func (cuo *CustomerUpdateOne) AddIDCard(i int) *CustomerUpdateOne {
	cuo.mutation.AddIDCard(i)
	return cuo
}

// SetMemberCard sets the "member_card" field.
func (cuo *CustomerUpdateOne) SetMemberCard(i int) *CustomerUpdateOne {
	cuo.mutation.ResetMemberCard()
	cuo.mutation.SetMemberCard(i)
	return cuo
}

// AddMemberCard adds i to the "member_card" field.
func (cuo *CustomerUpdateOne) AddMemberCard(i int) *CustomerUpdateOne {
	cuo.mutation.AddMemberCard(i)
	return cuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (cuo *CustomerUpdateOne) SetDateOfBirth(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetDateOfBirth(t)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Username(); ok {
		if err := customer.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Customer.username": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Fullname(); ok {
		if err := customer.FullnameValidator(v); err != nil {
			return &ValidationError{Name: "fullname", err: fmt.Errorf(`ent: validator failed for field "Customer.fullname": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.IDCard(); ok {
		if err := customer.IDCardValidator(v); err != nil {
			return &ValidationError{Name: "id_card", err: fmt.Errorf(`ent: validator failed for field "Customer.id_card": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MemberCard(); ok {
		if err := customer.MemberCardValidator(v); err != nil {
			return &ValidationError{Name: "member_card", err: fmt.Errorf(`ent: validator failed for field "Customer.member_card": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(customer.FieldUsername, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Fullname(); ok {
		_spec.SetField(customer.FieldFullname, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPhoneNumber(); ok {
		_spec.AddField(customer.FieldPhoneNumber, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IDCard(); ok {
		_spec.SetField(customer.FieldIDCard, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedIDCard(); ok {
		_spec.AddField(customer.FieldIDCard, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MemberCard(); ok {
		_spec.SetField(customer.FieldMemberCard, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMemberCard(); ok {
		_spec.AddField(customer.FieldMemberCard, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.DateOfBirth(); ok {
		_spec.SetField(customer.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
